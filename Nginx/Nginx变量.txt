nginx中除了一些内建变量，自定义变量(通过set指令定义的)，还有一类比较特别的变量，我称它们为特殊前缀变量，这类变量多数在内建变量数组内是找不到的.
形式可以分一下几类：
	$http_xxx，指代那些客户请求过来的header。
	$sent_http_xxx，指代将要由nginx发往客户端的header。
	$upstream_http_xxx，指代nginx接收到的上游响应header。
	$cookie_xxx，用来确定cookie中的特定值。
	$arg_xxx，用来取得特定请求参数值
	关于他们的实际运作，可以参考ngx_http_variables_init_vars函数，比较简单。
	其中有些常见的http_xxx和sent_http_xxx(其实主要是一些header)在内建变量数组中已经给出。
	多数偏僻的则没有指明，所以nginx碰到这些变量的时候，就把他们列为"unknown header"， 处理这些"unknown header"的方法，则采用统一的handler，因为nginx处理时并不关心内容和细节。

	注：
		标准header名中有‘-’连接线的，要写成‘_’下划线，这是语法上的约定.
		比如：要取Accept-Encoding头的内容，可以用$http_Accept_Encoding.
		
		
	
nginx内置变量
	内置变量存放在  ngx_http_core_module 模块中，变量的命名方式和apache 服务器变量是一致的。这些变量代表着客户端请求头的内容，例如$http_user_agent, $http_cookie, 等等。

下面是nginx支持的所有内置变量：
$arg_name：请求中的的参数名，即“?”后面的arg_name=arg_value形式的arg_name
		HTTP 请求中某个参数的值，如/index.php?site=www.ttlsa.com，可以用$arg_site取得www.ttlsa.com这个值

$args：请求中的完整参数，例如，在请求/index.php?width=400&height=200 中，$args表示字符串width=400&height=200.

$binary_remote_addr：二进制格式的客户端地址。例如：\x0A\xE0B\x0E

$body_bytes_sent：传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的“%B”参数保持兼容

$bytes_sent：传输给客户端的字节数 (1.3.8, 1.2.5)

$connection：TCP连接的序列号 (1.3.8, 1.2.5)

$connection_requests：TCP连接当前的请求数量 (1.3.8, 1.2.5)

$content_length：客户端请求头中“Content-Length” 字段

$content_type：客户端请求头中“Content-Type” 字段

$cookie_name：表示在客户端请求头部中的cookie 字段

$document_root：当前请求的文档根目录或别名
$uri：当前请求中的URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如”/foo/bar.html”。

$document_uri：同 $uri

$request_uri：表示客户端发来的原始请求URI，带完整的参数。$uri和$document_uri未必是用户的原始请求，在内部重定向后可能是重定向后的URI，而$request_uri 永远不会改变，始终是客户端的原始URI. 

$host：优先级如下：HTTP请求行的主机名 > ”HOST”请求头字段 > 符合请求的服务器名
		如果Host字段不存在，则以实际处理的server名称代替
		如果Host带端口：ip:port，那么$host是去掉端口的，它的值是IP
		与http_HEADER中的http_host不同，http_host只取出Host头部对应的值，不修改

$hostname：表示nginx所在服务器的名称，与gethostbyname调用返回的值相同

$http_name：匹配任意请求头字段； 变量名中的后半部分“name”可以替换成任意请求头字段，如在配置文件中需要获取http请求头：“Accept-Language”，那么将“－”替换为下划线，大写字母替换为小写，形如：$http_accept_language即可。

$http_HEADER： 表示当前 HTTP请求中相应头部的值。HEADER名称全小写。例如，示请求中 Host头部对应的值   用 $http_host表示
$sent_http_HEADER：表示返回客户端的 HTTP响应中相应头部的值。HEADER名称全小写。
		例如，用 $sent_http_content_type表示响应中 Content-Type头部对应的值 

$http_referer：记录从哪个页面链接访问过来的

$https：如果开启了SSL安全模式，值为“on”，否则为空字符串。

$is_args：如果请求中URI有带参数，值为“?”，如果URI中不带参数则为空字符串。

$limit_rate：表示当前连接的限速是多少，0表示无限速

$msec：当前的Unix时间戳 (1.3.9, 1.2.6)

$nginx_version：表示当前 Nginx的版本号

$pid：工作进程的PID

$pipe：如果请求来自管道通信，值为“p”，否则为“.” (1.3.12, 1.2.7)

$proxy_protocol_addr：获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串。(1.5.12)

$query_string：请求 URI中的参数，与 $args相同，然而 $query_string是只读的不会改

$realpath_root：当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径。

$remote_addr：客户端地址

$remote_port：客户端端口

$remote_user：用于HTTP基础认证服务的用户名；表示使用 Auth Basic Module时定义的用户名

$request：代表客户端的请求地址

$request_body：客户端的请求主体此变量可在location中使用，将请求主体通过proxy_pass, fastcgi_pass, uwsgi_pass, 和 scgi_pass传递给下一级的代理服务器。表示用户请求中的 URI经过 root或 alias转换后的文件路径

$request_body_file：将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off, uwsgi_pass_request_body off, or scgi_pass_request_body off 。

$request_completion：如果请求成功，值为”OK”，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空。
		当请求已经全部完成时，其值为 “ok”。若没有完成，就要返回客户端，则其值为空字符串；或者在断点续传等情况下使用 HTTP range访问的并不是文件的最后一块，那么其值也是空字符串。

$request_filename：表示用户请求中的 URI经过 root或 alias转换后的文件路径

$request_length：请求的长度 (包括请求的地址, http请求头和请求主体) (1.3.12, 1.2.7)

$request_method：HTTP请求方法，通常为“GET”或“POST”

$request_time：处理客户端请求使用的时间 (1.3.9, 1.2.6); 从读取客户端的第一个字节开始计时。

$request_uri：这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：”/cnphp/test.php?arg=freemouse”。

$scheme：请求使用的Web协议, “http” 或 “https”

$sent_http_name：可以设置任意http响应头字段； 变量名中的后半部分“name”可以替换成任意响应头字段，如需要设置响应头Content-length，那么将“－”替换为下划线，大写字母替换为小写，形如：$sent_http_content_length 4096即可。

$server_addr：服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中。

$server_name：服务器名，www.cnphp.info

$server_port：服务器端口

$server_protocol：服务器的HTTP版本, 通常为 “HTTP/1.0” 或 “HTTP/1.1”

$status：HTTP响应代码 (1.3.2, 1.2.2)

$tcpinfo_rtt, $tcpinfo_rttvar, $tcpinfo_snd_cwnd, $tcpinfo_rcv_space：客户端TCP连接的具体信息

$time_iso8601：服务器时间的ISO 8610格式 (1.3.12, 1.2.7)

$time_local：服务器时间（LOG Format 格式） (1.3.12, 1.2.7)

$uri：当前请求中的URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如”/foo/bar.html”。







$binary_remote_addr	1.0.8	远程地址的二进制表示

$content_length	1.0.8	HTTP请求信息里的”Content-Length”;
$content_type	1.0.8	请求信息里的”Content-Type”;
$document_root	1.0.8	针对当前请求的根路径设置值;
$document_uri	1.0.8	与$uri相同;
$host	1.0.8	请求信息中的”Host”，如果请求中没有Host行，则等于设置的服务器名;
$hostname	1.0.8	 
$http_cookie	1.0.8	cookie 信息
$http_post	1.0.8	 
$http_referer	1.0.8	引用地址
$http_user_agent	1.0.8	客户端代理信息
$http_via	1.0.8	最后一个访问服务器的Ip地址
http://www.cnblogs.com/deng02/archive/2009/02/11/1387911.html
$http_x_forwarded_for	1.0.8	相当于网络访问路径。
http://www.cnblogs.com/craig/archive/2008/11/18/1335809.html
$is_args	1.0.8	 
$limit_rate	1.0.8	对连接速率的限制;
$nginx_version	1.0.8	 
$pid	1.0.8	 
$query_string	1.0.8	与$args相同;
$realpath_root	1.0.8	 
$remote_addr	1.0.8	客户端地址;
$remote_port	1.0.8	客户端端口号;
$remote_user	1.0.8	客户端用户名，认证用;
$request	1.0.8	用户请求
$request_body	1.0.8	 
$request_body_file	1.0.8	发往后端的本地文件名称
$request_completion	1.0.8	 
$request_filename	1.0.8	当前请求的文件路径名
$request_method	1.0.8	请求的方法，比如”GET”、”POST”等;
$request_uri	1.0.8	请求的URI，带参数;
$scheme	1.0.8	所用的协议，比如http或者是https，比如rewrite^(.+)$$scheme:example.com$1redirect;
$sent_http_cache_control	1.0.8	 
$sent_http_connection	1.0.8	 

 
$sent_http_keep_alive	1.0.8	 
$sent_http_last_modified	1.0.8	
$sent_http_location	1.0.8	 
$sent_http_transfer_encoding	1.0.8	
$server_addr	1.0.8	服务器地址，如果没有用listen指明服务器地址，使用这个变量将发起一次系统调用以取得地址(造成资源浪费);
$server_name	1.0.8	请求到达的服务器名;
$server_port	1.0.8	请求到达的服务器端口号;
$server_protocol	1.0.8	请求的协议版本，”HTTP/1.0”或”HTTP/1.1”;
$uri	1.0.8	请求的URI，可能和最初的值有不同，比如经过重定向之类的
